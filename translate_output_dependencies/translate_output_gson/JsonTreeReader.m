//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java//com/google/gson/internal/bind/JsonTreeReader.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JsonArray.h"
#include "JsonElement.h"
#include "JsonNull.h"
#include "JsonObject.h"
#include "JsonPrimitive.h"
#include "JsonReader.h"
#include "JsonToken.h"
#include "JsonTreeReader.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComGoogleGsonInternalBindJsonTreeReader () {
 @public
  id<JavaUtilList> stack_JsonTreeReader_;
}

- (id)peekStack;

- (id)popStack;

- (void)expectWithComGoogleGsonStreamJsonTokenEnum:(ComGoogleGsonStreamJsonTokenEnum *)expected;

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonInternalBindJsonTreeReader, stack_JsonTreeReader_, id<JavaUtilList>)

static JavaIoReader *ComGoogleGsonInternalBindJsonTreeReader_UNREADABLE_READER_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonInternalBindJsonTreeReader, UNREADABLE_READER_, JavaIoReader *)

static id ComGoogleGsonInternalBindJsonTreeReader_SENTINEL_CLOSED_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonInternalBindJsonTreeReader, SENTINEL_CLOSED_, id)

__attribute__((unused)) static id ComGoogleGsonInternalBindJsonTreeReader_peekStack(ComGoogleGsonInternalBindJsonTreeReader *self);

__attribute__((unused)) static id ComGoogleGsonInternalBindJsonTreeReader_popStack(ComGoogleGsonInternalBindJsonTreeReader *self);

__attribute__((unused)) static void ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonTokenEnum_(ComGoogleGsonInternalBindJsonTreeReader *self, ComGoogleGsonStreamJsonTokenEnum *expected);

@interface ComGoogleGsonInternalBindJsonTreeReader_$1 : JavaIoReader

- (jint)readWithCharArray:(IOSCharArray *)buffer
                  withInt:(jint)offset
                  withInt:(jint)count;

- (void)close;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonInternalBindJsonTreeReader_$1)

__attribute__((unused)) static void ComGoogleGsonInternalBindJsonTreeReader_$1_init(ComGoogleGsonInternalBindJsonTreeReader_$1 *self);

__attribute__((unused)) static ComGoogleGsonInternalBindJsonTreeReader_$1 *new_ComGoogleGsonInternalBindJsonTreeReader_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonInternalBindJsonTreeReader_$1)

J2OBJC_INITIALIZED_DEFN(ComGoogleGsonInternalBindJsonTreeReader)

@implementation ComGoogleGsonInternalBindJsonTreeReader

- (instancetype)initWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)element {
  ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(self, element);
  return self;
}

- (void)beginArray {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonTokenEnum_(self, JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, BEGIN_ARRAY));
  ComGoogleGsonJsonArray *array = (ComGoogleGsonJsonArray *) check_class_cast(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), [ComGoogleGsonJsonArray class]);
  [((id<JavaUtilList>) nil_chk(stack_JsonTreeReader_)) addWithId:[((ComGoogleGsonJsonArray *) nil_chk(array)) iterator]];
}

- (void)endArray {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonTokenEnum_(self, JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, END_ARRAY));
  ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
}

- (void)beginObject {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonTokenEnum_(self, JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, BEGIN_OBJECT));
  ComGoogleGsonJsonObject *object = (ComGoogleGsonJsonObject *) check_class_cast(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), [ComGoogleGsonJsonObject class]);
  [((id<JavaUtilList>) nil_chk(stack_JsonTreeReader_)) addWithId:[((id<JavaUtilSet>) nil_chk([((ComGoogleGsonJsonObject *) nil_chk(object)) entrySet])) iterator]];
}

- (void)endObject {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonTokenEnum_(self, JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, END_OBJECT));
  ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
}

- (jboolean)hasNext {
  ComGoogleGsonStreamJsonTokenEnum *token = [self peek];
  return token != JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, END_OBJECT) && token != JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, END_ARRAY);
}

- (ComGoogleGsonStreamJsonTokenEnum *)peek {
  if ([((id<JavaUtilList>) nil_chk(stack_JsonTreeReader_)) isEmpty]) {
    return JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, END_DOCUMENT);
  }
  id o = ComGoogleGsonInternalBindJsonTreeReader_peekStack(self);
  if ([JavaUtilIterator_class_() isInstance:o]) {
    jboolean isObject = [[stack_JsonTreeReader_ getWithInt:[stack_JsonTreeReader_ size] - 2] isKindOfClass:[ComGoogleGsonJsonObject class]];
    id<JavaUtilIterator> iterator = (id<JavaUtilIterator>) check_protocol_cast(o, JavaUtilIterator_class_());
    if ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      if (isObject) {
        return JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NAME);
      }
      else {
        [stack_JsonTreeReader_ addWithId:[iterator next]];
        return [self peek];
      }
    }
    else {
      return isObject ? JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, END_OBJECT) : JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, END_ARRAY);
    }
  }
  else if ([o isKindOfClass:[ComGoogleGsonJsonObject class]]) {
    return JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, BEGIN_OBJECT);
  }
  else if ([o isKindOfClass:[ComGoogleGsonJsonArray class]]) {
    return JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, BEGIN_ARRAY);
  }
  else if ([o isKindOfClass:[ComGoogleGsonJsonPrimitive class]]) {
    ComGoogleGsonJsonPrimitive *primitive = (ComGoogleGsonJsonPrimitive *) check_class_cast(o, [ComGoogleGsonJsonPrimitive class]);
    if ([((ComGoogleGsonJsonPrimitive *) nil_chk(primitive)) isString]) {
      return JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, STRING);
    }
    else if ([primitive isBoolean]) {
      return JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, BOOLEAN);
    }
    else if ([primitive isNumber]) {
      return JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NUMBER);
    }
    else {
      @throw [new_JavaLangAssertionError_init() autorelease];
    }
  }
  else if ([o isKindOfClass:[ComGoogleGsonJsonNull class]]) {
    return JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NULL);
  }
  else if (o == ComGoogleGsonInternalBindJsonTreeReader_SENTINEL_CLOSED_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"JsonReader is closed") autorelease];
  }
  else {
    @throw [new_JavaLangAssertionError_init() autorelease];
  }
}

- (id)peekStack {
  return ComGoogleGsonInternalBindJsonTreeReader_peekStack(self);
}

- (id)popStack {
  return ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
}

- (void)expectWithComGoogleGsonStreamJsonTokenEnum:(ComGoogleGsonStreamJsonTokenEnum *)expected {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonTokenEnum_(self, expected);
}

- (NSString *)nextName {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonTokenEnum_(self, JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NAME));
  id<JavaUtilIterator> i = (id<JavaUtilIterator>) check_protocol_cast(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), JavaUtilIterator_class_());
  id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([((id<JavaUtilIterator>) nil_chk(i)) next], JavaUtilMap_Entry_class_());
  [((id<JavaUtilList>) nil_chk(stack_JsonTreeReader_)) addWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue]];
  return (NSString *) check_class_cast([entry_ getKey], [NSString class]);
}

- (NSString *)nextString {
  ComGoogleGsonStreamJsonTokenEnum *token = [self peek];
  if (token != JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, STRING) && token != JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NUMBER)) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@", @"Expected ", JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, STRING), @" but was ", token)) autorelease];
  }
  return [((ComGoogleGsonJsonPrimitive *) nil_chk(((ComGoogleGsonJsonPrimitive *) check_class_cast(ComGoogleGsonInternalBindJsonTreeReader_popStack(self), [ComGoogleGsonJsonPrimitive class])))) getAsString];
}

- (jboolean)nextBoolean {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonTokenEnum_(self, JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, BOOLEAN));
  return [((ComGoogleGsonJsonPrimitive *) nil_chk(((ComGoogleGsonJsonPrimitive *) check_class_cast(ComGoogleGsonInternalBindJsonTreeReader_popStack(self), [ComGoogleGsonJsonPrimitive class])))) getAsBoolean];
}

- (void)nextNull {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonTokenEnum_(self, JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NULL));
  ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
}

- (jdouble)nextDouble {
  ComGoogleGsonStreamJsonTokenEnum *token = [self peek];
  if (token != JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NUMBER) && token != JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, STRING)) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@", @"Expected ", JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NUMBER), @" but was ", token)) autorelease];
  }
  jdouble result = [((ComGoogleGsonJsonPrimitive *) nil_chk(((ComGoogleGsonJsonPrimitive *) check_class_cast(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), [ComGoogleGsonJsonPrimitive class])))) getAsDouble];
  if (![self isLenient] && (JavaLangDouble_isNaNWithDouble_(result) || JavaLangDouble_isInfiniteWithDouble_(result))) {
    @throw [new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$D", @"JSON forbids NaN and infinities: ", result)) autorelease];
  }
  ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  return result;
}

- (jlong)nextLong {
  ComGoogleGsonStreamJsonTokenEnum *token = [self peek];
  if (token != JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NUMBER) && token != JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, STRING)) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@", @"Expected ", JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NUMBER), @" but was ", token)) autorelease];
  }
  jlong result = [((ComGoogleGsonJsonPrimitive *) nil_chk(((ComGoogleGsonJsonPrimitive *) check_class_cast(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), [ComGoogleGsonJsonPrimitive class])))) getAsLong];
  ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  return result;
}

- (jint)nextInt {
  ComGoogleGsonStreamJsonTokenEnum *token = [self peek];
  if (token != JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NUMBER) && token != JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, STRING)) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@", @"Expected ", JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NUMBER), @" but was ", token)) autorelease];
  }
  jint result = [((ComGoogleGsonJsonPrimitive *) nil_chk(((ComGoogleGsonJsonPrimitive *) check_class_cast(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), [ComGoogleGsonJsonPrimitive class])))) getAsInt];
  ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  return result;
}

- (void)close {
  [((id<JavaUtilList>) nil_chk(stack_JsonTreeReader_)) clear];
  [stack_JsonTreeReader_ addWithId:ComGoogleGsonInternalBindJsonTreeReader_SENTINEL_CLOSED_];
}

- (void)skipValue {
  if ([self peek] == JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NAME)) {
    [self nextName];
  }
  else {
    ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  }
}

- (NSString *)description {
  return [[self getClass] getSimpleName];
}

- (void)promoteNameToValue {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonTokenEnum_(self, JreLoadStatic(ComGoogleGsonStreamJsonTokenEnum, NAME));
  id<JavaUtilIterator> i = (id<JavaUtilIterator>) check_protocol_cast(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), JavaUtilIterator_class_());
  id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([((id<JavaUtilIterator>) nil_chk(i)) next], JavaUtilMap_Entry_class_());
  [((id<JavaUtilList>) nil_chk(stack_JsonTreeReader_)) addWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue]];
  [stack_JsonTreeReader_ addWithId:[new_ComGoogleGsonJsonPrimitive_initWithNSString_((NSString *) check_class_cast([entry_ getKey], [NSString class])) autorelease]];
}

- (void)dealloc {
  RELEASE_(stack_JsonTreeReader_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [ComGoogleGsonInternalBindJsonTreeReader class]) {
    JreStrongAssignAndConsume(&ComGoogleGsonInternalBindJsonTreeReader_UNREADABLE_READER_, new_ComGoogleGsonInternalBindJsonTreeReader_$1_init());
    JreStrongAssignAndConsume(&ComGoogleGsonInternalBindJsonTreeReader_SENTINEL_CLOSED_, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(ComGoogleGsonInternalBindJsonTreeReader)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComGoogleGsonJsonElement:", "JsonTreeReader", NULL, 0x1, NULL, NULL },
    { "beginArray", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "endArray", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "beginObject", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "endObject", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "hasNext", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "peek", NULL, "Lcom.google.gson.stream.JsonToken;", 0x1, "Ljava.io.IOException;", NULL },
    { "peekStack", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "popStack", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "expectWithComGoogleGsonStreamJsonTokenEnum:", "expect", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "nextName", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "nextString", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "nextBoolean", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "nextNull", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "nextDouble", NULL, "D", 0x1, "Ljava.io.IOException;", NULL },
    { "nextLong", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "nextInt", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "skipValue", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "promoteNameToValue", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "UNREADABLE_READER_", NULL, 0x1a, "Ljava.io.Reader;", &ComGoogleGsonInternalBindJsonTreeReader_UNREADABLE_READER_, NULL, .constantValue.asLong = 0 },
    { "SENTINEL_CLOSED_", NULL, 0x1a, "Ljava.lang.Object;", &ComGoogleGsonInternalBindJsonTreeReader_SENTINEL_CLOSED_, NULL, .constantValue.asLong = 0 },
    { "stack_JsonTreeReader_", "stack", 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Object;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComGoogleGsonInternalBindJsonTreeReader = { 2, "JsonTreeReader", "com.google.gson.internal.bind", NULL, 0x11, 21, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleGsonInternalBindJsonTreeReader;
}

@end

void ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(ComGoogleGsonInternalBindJsonTreeReader *self, ComGoogleGsonJsonElement *element) {
  ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(self, ComGoogleGsonInternalBindJsonTreeReader_UNREADABLE_READER_);
  JreStrongAssignAndConsume(&self->stack_JsonTreeReader_, new_JavaUtilArrayList_init());
  [self->stack_JsonTreeReader_ addWithId:element];
}

ComGoogleGsonInternalBindJsonTreeReader *new_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(ComGoogleGsonJsonElement *element) {
  ComGoogleGsonInternalBindJsonTreeReader *self = [ComGoogleGsonInternalBindJsonTreeReader alloc];
  ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(self, element);
  return self;
}

id ComGoogleGsonInternalBindJsonTreeReader_peekStack(ComGoogleGsonInternalBindJsonTreeReader *self) {
  return [self->stack_JsonTreeReader_ getWithInt:[((id<JavaUtilList>) nil_chk(self->stack_JsonTreeReader_)) size] - 1];
}

id ComGoogleGsonInternalBindJsonTreeReader_popStack(ComGoogleGsonInternalBindJsonTreeReader *self) {
  return [self->stack_JsonTreeReader_ removeWithInt:[((id<JavaUtilList>) nil_chk(self->stack_JsonTreeReader_)) size] - 1];
}

void ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonTokenEnum_(ComGoogleGsonInternalBindJsonTreeReader *self, ComGoogleGsonStreamJsonTokenEnum *expected) {
  if ([self peek] != expected) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@", @"Expected ", expected, @" but was ", [self peek])) autorelease];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonInternalBindJsonTreeReader)

@implementation ComGoogleGsonInternalBindJsonTreeReader_$1

- (jint)readWithCharArray:(IOSCharArray *)buffer
                  withInt:(jint)offset
                  withInt:(jint)count {
  @throw [new_JavaLangAssertionError_init() autorelease];
}

- (void)close {
  @throw [new_JavaLangAssertionError_init() autorelease];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonInternalBindJsonTreeReader_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readWithCharArray:withInt:withInt:", "read", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComGoogleGsonInternalBindJsonTreeReader_$1 = { 2, "", "com.google.gson.internal.bind", "JsonTreeReader", 0x8008, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleGsonInternalBindJsonTreeReader_$1;
}

@end

void ComGoogleGsonInternalBindJsonTreeReader_$1_init(ComGoogleGsonInternalBindJsonTreeReader_$1 *self) {
  JavaIoReader_init(self);
}

ComGoogleGsonInternalBindJsonTreeReader_$1 *new_ComGoogleGsonInternalBindJsonTreeReader_$1_init() {
  ComGoogleGsonInternalBindJsonTreeReader_$1 *self = [ComGoogleGsonInternalBindJsonTreeReader_$1 alloc];
  ComGoogleGsonInternalBindJsonTreeReader_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonInternalBindJsonTreeReader_$1)
