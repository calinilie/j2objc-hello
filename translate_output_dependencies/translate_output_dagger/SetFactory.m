//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java//dagger/internal/SetFactory.java
//

#include "Collections.h"
#include "Factory.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "SetFactory.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "javax/inject/Provider.h"

@interface DaggerInternalSetFactory () {
 @public
  id<JavaUtilList> contributingProviders_;
}

+ (jboolean)hasDuplicatesWithJavaUtilList:(id<JavaUtilList>)original;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)contributingProviders;

@end

J2OBJC_FIELD_SETTER(DaggerInternalSetFactory, contributingProviders_, id<JavaUtilList>)

static NSString *DaggerInternalSetFactory_ARGUMENTS_MUST_BE_NON_NULL_ = @"SetFactory.create() requires its arguments to be non-null";
J2OBJC_STATIC_FIELD_GETTER(DaggerInternalSetFactory, ARGUMENTS_MUST_BE_NON_NULL_, NSString *)

__attribute__((unused)) static jboolean DaggerInternalSetFactory_hasDuplicatesWithJavaUtilList_(id<JavaUtilList> original);

__attribute__((unused)) static void DaggerInternalSetFactory_initWithJavaUtilList_(DaggerInternalSetFactory *self, id<JavaUtilList> contributingProviders);

__attribute__((unused)) static DaggerInternalSetFactory *new_DaggerInternalSetFactory_initWithJavaUtilList_(id<JavaUtilList> contributingProviders) NS_RETURNS_RETAINED;

@implementation DaggerInternalSetFactory

+ (id<DaggerInternalFactory>)createWithDaggerInternalFactory:(id<DaggerInternalFactory>)factory {
  return DaggerInternalSetFactory_createWithDaggerInternalFactory_(factory);
}

+ (id<DaggerInternalFactory>)createWithJavaxInjectProviderArray:(IOSObjectArray *)providers {
  return DaggerInternalSetFactory_createWithJavaxInjectProviderArray_(providers);
}

+ (jboolean)hasDuplicatesWithJavaUtilList:(id<JavaUtilList>)original {
  return DaggerInternalSetFactory_hasDuplicatesWithJavaUtilList_(original);
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)contributingProviders {
  DaggerInternalSetFactory_initWithJavaUtilList_(self, contributingProviders);
  return self;
}

- (id<JavaUtilSet>)get {
  jint size = 0;
  id<JavaUtilList> providedSets = [new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(contributingProviders_)) size]) autorelease];
  for (jint i = 0, c = [contributingProviders_ size]; i < c; i++) {
    id<JavaxInjectProvider> provider = [contributingProviders_ getWithInt:i];
    id<JavaUtilSet> providedSet = [((id<JavaxInjectProvider>) nil_chk(provider)) get];
    if (providedSet == nil) {
      @throw [new_JavaLangNullPointerException_initWithNSString_(JreStrcat("@$", provider, @" returned null")) autorelease];
    }
    [providedSets addWithId:providedSet];
    size += [((id<JavaUtilSet>) nil_chk(providedSet)) size];
  }
  id<JavaUtilSet> result = DaggerInternalCollections_newLinkedHashSetWithExpectedSizeWithInt_(size);
  for (jint i = 0, c = [providedSets size]; i < c; i++) {
    for (id __strong element in nil_chk([providedSets getWithInt:i])) {
      if (element == nil) {
        @throw [new_JavaLangNullPointerException_initWithNSString_(@"a null element was provided") autorelease];
      }
      [((id<JavaUtilSet>) nil_chk(result)) addWithId:element];
    }
  }
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(result);
}

- (void)dealloc {
  RELEASE_(contributingProviders_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createWithDaggerInternalFactory:", "create", "Ldagger.internal.Factory;", 0x9, NULL, "<T:Ljava/lang/Object;>(Ldagger/internal/Factory<Ljava/util/Set<TT;>;>;)Ldagger/internal/Factory<Ljava/util/Set<TT;>;>;" },
    { "createWithJavaxInjectProviderArray:", "create", "Ldagger.internal.Factory;", 0x89, NULL, "<T:Ljava/lang/Object;>([Ljavax/inject/Provider<Ljava/util/Set<TT;>;>;)Ldagger/internal/Factory<Ljava/util/Set<TT;>;>;" },
    { "hasDuplicatesWithJavaUtilList:", "hasDuplicates", "Z", 0xa, NULL, NULL },
    { "initWithJavaUtilList:", "SetFactory", NULL, 0x2, NULL, NULL },
    { "get", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ARGUMENTS_MUST_BE_NON_NULL_", NULL, 0x1a, "Ljava.lang.String;", &DaggerInternalSetFactory_ARGUMENTS_MUST_BE_NON_NULL_, NULL, .constantValue.asLong = 0 },
    { "contributingProviders_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljavax/inject/Provider<Ljava/util/Set<TT;>;>;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _DaggerInternalSetFactory = { 2, "SetFactory", "dagger.internal", NULL, 0x11, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Ldagger/internal/Factory<Ljava/util/Set<TT;>;>;" };
  return &_DaggerInternalSetFactory;
}

@end

id<DaggerInternalFactory> DaggerInternalSetFactory_createWithDaggerInternalFactory_(id<DaggerInternalFactory> factory) {
  DaggerInternalSetFactory_initialize();
  JreAssert((factory != nil), (DaggerInternalSetFactory_ARGUMENTS_MUST_BE_NON_NULL_));
  return factory;
}

id<DaggerInternalFactory> DaggerInternalSetFactory_createWithJavaxInjectProviderArray_(IOSObjectArray *providers) {
  DaggerInternalSetFactory_initialize();
  JreAssert((providers != nil), (DaggerInternalSetFactory_ARGUMENTS_MUST_BE_NON_NULL_));
  id<JavaUtilList> contributingProviders = JavaUtilArrays_asListWithNSObjectArray_(providers);
  JreAssert((![((id<JavaUtilList>) nil_chk(contributingProviders)) containsWithId:nil]), (@"Codegen error?  Null within provider list."));
  JreAssert((!DaggerInternalSetFactory_hasDuplicatesWithJavaUtilList_(contributingProviders)), (@"Codegen error?  Duplicates in the provider list"));
  return [new_DaggerInternalSetFactory_initWithJavaUtilList_(contributingProviders) autorelease];
}

jboolean DaggerInternalSetFactory_hasDuplicatesWithJavaUtilList_(id<JavaUtilList> original) {
  DaggerInternalSetFactory_initialize();
  id<JavaUtilSet> asSet = [new_JavaUtilHashSet_initWithJavaUtilCollection_(original) autorelease];
  return [((id<JavaUtilList>) nil_chk(original)) size] != [asSet size];
}

void DaggerInternalSetFactory_initWithJavaUtilList_(DaggerInternalSetFactory *self, id<JavaUtilList> contributingProviders) {
  NSObject_init(self);
  JreStrongAssign(&self->contributingProviders_, contributingProviders);
}

DaggerInternalSetFactory *new_DaggerInternalSetFactory_initWithJavaUtilList_(id<JavaUtilList> contributingProviders) {
  DaggerInternalSetFactory *self = [DaggerInternalSetFactory alloc];
  DaggerInternalSetFactory_initWithJavaUtilList_(self, contributingProviders);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalSetFactory)
